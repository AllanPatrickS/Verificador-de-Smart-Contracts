MODULE sa1()
VAR
	prog : {int_i_0, i_=_0_1};
	i : 0..0;
ASSIGN
	init(prog) := {int_i_0};
	init(i) := 0;
	next(prog) := case
					prog = int_i_0: i_=_0_1;
	next(i) := case
					prog = i_=_0_1: 0;
					TRUE = i;

MODULE createNode(nodeId)

	VAR
		IPSent: boolean;
		IPReceived: boolean;
		connectSeed: boolean;
		versionSent: boolean;
		verack: boolean;
		networkOK: boolean;
		lastBlockId: 0..10;
	
	ASSIGN
		init(IPSent) := TRUE;
		init(IPReceived) := FALSE;
		init(connectSeed) := FALSE;
		init(versionSent) := FALSE;
		init(verack) := FALSE;
		init(networkOK) := FALSE;
		init(lastBlockId) := 0;


		next(IPSent) := TRUE;
		next(IPReceived) := IPSent = TRUE ? TRUE : FALSE;
		next(connectSeed) := (IPSent = TRUE & IPReceived = TRUE) ? TRUE : FALSE;
		next(versionSent) := connectSeed = TRUE ? TRUE : FALSE;
		next(verack) := versionSent = TRUE ? TRUE : FALSE;
		next(networkOK) := verack = TRUE ? TRUE : FALSE;

MODULE createUser(idUser, initBalance)

	VAR
		balance : 0..400;
		busy : boolean;

	ASSIGN
		init(balance) := initBalance;

	TRANS !update -> conserve ;
	
	DEFINE
		conserve := (next(balance) = balance);

MODULE createTransactionProgram(idTrans, from, to, program)
	
	FROZENVAR
		blockId : 0..10;

	DEFINE
		validTransaction :=  !from.busy & !to.busy;

	TRANS
		validTransaction -> (next(from.busy)=!from.busy) & 
							(next(to.busy)=!to.busy) &
                          	program;


MODULE createBlock(idBloco, txa, txb)
	FROZENVAR
		id : 0..10;

	ASSIGN
		init(id) := idBloco;
		init(txa.blockId) := validBlock ? id : 0;
		init(txb.blockId) := validBlock ? id : 0;
		

	DEFINE
		validBlock := txa.validTransaction & txb.validTransaction;
		nonce := signed word[32](190);
		--hash := validBlock ? (nonce :: signed word [32](txa.to) :: signed word [32](txb.to) :: signed word[32](previousBlock))
		--		: unsigned word[128](0);



MODULE updateNode(node, block)

	DEFINE
		lastNodeBlock := node.lastBlockId;
		blockToUpdate := block.validBlock ? block.id : -1;
		shouldUpdate := lastNodeBlock <= blockToUpdate;	
	ASSIGN
		next(node.lastBlockId) := shouldUpdate ? lastNodeBlock : block.id;

MODULE main
VAR

   node1 : createNode(1);
   node2 : createNode(2);

   user1 : createUser(self,1);
   user2 : createUser(self,2);

   tx1 : createTransactionProgram(self,user1,user2,sa1());

   block1 : createBlock(1,debito,pagamento);

ASSIGN
 init(user1.busy) := TRUE;

DEFINE
   user1.update := FALSE;
   user2.update := FALSE;

block1.previousBlock := block1.validBlock ? 0 : -1;